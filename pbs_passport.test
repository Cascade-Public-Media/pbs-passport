<?php

/**
 * @file
 * Tests for the PBS Passport module.
 */

/**
 * Functional tests.
 *
 * @see DrupalWebTestCase
 * @see SimpleTestUnitTestExampleTestCase
 *
 * @ingroup pbs_passport
 */
class PbsPassportWebTestCase extends DrupalWebTestCase {

  /**
   * A privileged Drupal user.
   *
   * @var object
   */
  protected $admin_user;

  /**
   * Test information.
   */
  public static function getInfo() {
    return array(
      'name' => 'PBS Passport Functional Tests',
      'description' => 'Test basic PBS Passport module functionality.',
      'group' => 'PBS Passport',
    );
  }

  /**
   * Set up the test environment.
   *
   * @see DrupalWebTestCase::setUp()
   */
  public function setUp() {
    parent::setUp(array('ctools', 'views', 'token', 'pbs_passport'));
    // Create and log in a privileged user.
    $this->admin_user = $this->drupalCreateUser(array(
      'administer pbs passport',
      'view pbs passport debug data'
    ));
  }

  /**
   * Test basic access to all of the module's menu items.
   */
  function testMenuItems() {
    $this->drupalLogin($this->admin_user);
    $items = pbs_passport_menu();
    foreach ($items as $path => $item) {
      if ($path == 'pbs-passport/login'
        || $path == 'pbs-passport/auth'
        || $path == 'admin/config/people/pbs-passport') {
        continue;
      }

      $this->drupalGet($path);
      $this->assertTitle($item['title'] . ' | Drupal');
    }
  }

}


/**
 * Unit tests.
 *
 * @see DrupalUnitTestCase
 *
 * @ingroup pbs_passport
 */
class PbsPassportUnitTestCase extends DrupalUnitTestCase {

  /**
   * {@inheritdoc}
   */
  public static function getInfo() {
    return array(
      'name' => 'PBS Passport Unit Tests',
      'description' => 'Test specific PBS Passport module functions/classes.',
      'group' => 'PBS Passport',
    );
  }

  /**
   * Set up the test environment.
   */
  public function setUp() {
    drupal_load('module', 'pbs_passport');
    parent::setUp();
  }

  /**
   * Test module constant values.
   */
  function testActivationStateConstants() {
    $expected = array(
      PBS_PASSPORT_MEMBERSHIP_ACTIVATED => 10,
      PBS_PASSPORT_MEMBERSHIP_NOT_ACTIVATED => 20,
      PBS_PASSPORT_MEMBERSHIP_GRACE_PERIOD => 30,
      PBS_PASSPORT_MEMBERSHIP_EXPIRED => 90,
      PBS_PASSPORT_MEMBERSHIP_UNKNOWN => 100,
    );

    foreach ($expected as $constant => $value) {
      $this->assertEqual($constant, $value, '','Constants');
    }
  }

  /**
   * Test pbs_passport_state_to_string().
   */
  function testActivationStateToString() {
    $expected = array(
      PBS_PASSPORT_MEMBERSHIP_ACTIVATED => 'Activated',
      PBS_PASSPORT_MEMBERSHIP_NOT_ACTIVATED => 'Not Activated',
      PBS_PASSPORT_MEMBERSHIP_GRACE_PERIOD => 'Grace Period',
      PBS_PASSPORT_MEMBERSHIP_EXPIRED => 'Expired',
      PBS_PASSPORT_MEMBERSHIP_UNKNOWN => 'Unknown',
    );

    foreach ($expected as $state => $string) {
      $this->assertEqual(
        pbs_passport_state_to_string($state),
        $string,
        '',
        'Constants'
      );
    }
  }

  /**
   * Test pbs_passport_get_station_data().
   */
  function testGetStationData() {
    $group = 'Station Data';

    $data = pbs_passport_get_station_data(NULL, 'kcts');
    $this->assertFalse(
      empty($data),
      'Station data array is not empty.',
      $group
    );
    $this->assertEqual($data['call_sign'], 'KCTS', '', $group);
  }

  /**
   * Helper function for getting private methods from classes.
   *
   * @param $class
   * @param $name
   *
   * @return bool|\ReflectionMethod
   */
  protected static function getMethod($class, $name) {
    try {
      $class = new ReflectionClass($class);
      $method = $class->getMethod($name);
      $method->setAccessible(true);
    }
    catch (Exception $e) {
      $method = FALSE;
    }
    return $method;
  }

  /**
   * Test the PbsLaasClient() class.
   *
   * Because we cannot actually establish an API connection, these tests are
   * very limited.
   */
  function testPbsLaasClient() {
    $group = 'Login Client';

    // Create client instance.
    $client = pbs_passport_get_laas_client();
    $this->assertTrue(
      $client instanceof PbsLaasClient,
      'PbsLaasClient created successfully.',
      $group
    );

    // VPPA status (must have been accepted in the past two years).
    $user = array('vppa' => array());
    $client->derive_and_append_vppa_status($user);
    $this->assertEqual($user['vppa_status'], 'false', '', $group);
    $user['vppa']['vppa_last_updated'] = date('Y-m-d', strtotime('-3 years'));
    $user['vppa']['vppa_accepted'] = FALSE;
    $client->derive_and_append_vppa_status($user);
    $this->assertEqual($user['vppa_status'], 'rejected', '', $group);
    $user['vppa']['vppa_accepted'] = TRUE;
    $client->derive_and_append_vppa_status($user);
    $this->assertEqual($user['vppa_status'], 'expired', '', $group);
    $user['vppa']['vppa_last_updated'] = date('Y-m-d', strtotime('-1 year'));
    $client->derive_and_append_vppa_status($user);
    $this->assertEqual($user['vppa_status'], 'valid', '', $group);
  }

  /**
   * Test the PbsMvaultClient() class.
   *
   * Because we cannot actually establish an API connection, these tests are
   * very limited.
   */
  function testPbsMvaultClient() {
    $group = 'MVault Client';

    // Create client instance.
    $client = pbs_passport_get_mvault_client();
    $this->assertTrue(
      $client instanceof PbsMvaultClient,
      'PbsMvaultClient created successfully.',
      $group
    );

    // Login provider normalization.
    $method = self::getMethod(
      'PbsMvaultClient',
      '_normalize_login_provider'
    );
    $data = array('pbs_profile' => array('login_provider' => ''));
    $test_providers = array(
      'fAcEBooK' => 'Facebook',
      'GOOGLE' => 'Google',
      'pbs' => 'PBS',
      'gobbledygook' => 'Unrecognized (gobbledygook)',
    );

    foreach ($test_providers as $provider => $result) {
      $data['pbs_profile']['login_provider'] = $provider;
      $method->invokeArgs($client, array(&$data));
      $this->assertEqual(
        $data['pbs_profile']['login_provider'],
        $result,
        '',
        $group
      );
    }

    // Activation URL generation.
    $method = self::getMethod(
      'PbsMvaultClient',
      '_add_activation_url'
    );
    $data = array('token' => NULL);
    $method->invokeArgs($client, array(&$data));
    $this->assertNull($data['activation_url'], '', $group);
    $data['token'] = 'test';
    $method->invokeArgs($client, array(&$data));
    $this->assertEqual(
      $data['activation_url'],
      PBS_PASSPORT_ACTIVATION_BASEURL . 'test/',
      '',
      $group
    );

    // Membership state determination.
    $method = self::getMethod(
      'PbsMvaultClient',
      '_add_membership_state'
    );
    $data = array('current_state' => array('explanation' => array(
      'token_activated' => NULL,
      'timing' => NULL
    )));

    $expected = array(
      array(
        FALSE,
        'within_start_expire_dates',
        PBS_PASSPORT_MEMBERSHIP_NOT_ACTIVATED
      ),
      array(
        TRUE,
        'within_start_expire_dates',
        PBS_PASSPORT_MEMBERSHIP_ACTIVATED
      ),
      array(
        FALSE,
        'within_grace_period',
        PBS_PASSPORT_MEMBERSHIP_NOT_ACTIVATED
      ),
      array(TRUE, 'within_grace_period', PBS_PASSPORT_MEMBERSHIP_GRACE_PERIOD),
      array(NULL, 'grace_period_over', PBS_PASSPORT_MEMBERSHIP_EXPIRED),
      array(NULL, 'unknown', PBS_PASSPORT_MEMBERSHIP_UNKNOWN),
    );

    foreach ($expected as $args) {
      $data['current_state']['explanation']['token_activated'] = $args[0];
      $data['current_state']['explanation']['timing'] = $args[1];
      $method->invokeArgs($client, array(&$data));
      $this->assertEqual(
        $data['state'],
        $args[2],
        'Membership state check succeeded.',
        $group
      );
    }
  }
}
